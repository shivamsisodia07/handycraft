[{"G:\\KrishiMarket\\src\\index.js":"1","G:\\KrishiMarket\\src\\serviceWorker.js":"2","G:\\KrishiMarket\\src\\App.js":"3","G:\\KrishiMarket\\src\\Landing.js":"4","G:\\KrishiMarket\\src\\AddItems.js":"5","G:\\KrishiMarket\\src\\Error.js":"6","G:\\KrishiMarket\\src\\NavBar.js":"7","G:\\KrishiMarket\\src\\Login.js":"8","G:\\KrishiMarket\\src\\Inventory.js":"9","G:\\KrishiMarket\\src\\Register.js":"10","G:\\KrishiMarket\\src\\Contact.js":"11","G:\\KrishiMarket\\src\\ItemDetails.js":"12","G:\\KrishiMarket\\src\\services\\token-service.js":"13","G:\\KrishiMarket\\src\\config.js":"14","G:\\KrishiMarket\\src\\Header.js":"15","G:\\KrishiMarket\\src\\validationError.js":"16","G:\\KrishiMarket\\src\\Footer.js":"17","G:\\KrishiMarket\\src\\services\\auth-api-service.js":"18","G:\\KrishiMarket\\src\\ShoppersSearch.js":"19"},{"size":455,"mtime":1610583195000,"results":"20","hashOfConfig":"21"},{"size":5086,"mtime":1610583195000,"results":"22","hashOfConfig":"21"},{"size":1138,"mtime":1610583195000,"results":"23","hashOfConfig":"21"},{"size":866,"mtime":1610583195000,"results":"24","hashOfConfig":"21"},{"size":8071,"mtime":1681155055509,"results":"25","hashOfConfig":"21"},{"size":212,"mtime":1610583195000,"results":"26","hashOfConfig":"21"},{"size":2576,"mtime":1610583195000,"results":"27","hashOfConfig":"21"},{"size":5438,"mtime":1610583195000,"results":"28","hashOfConfig":"21"},{"size":3189,"mtime":1681130433438,"results":"29","hashOfConfig":"21"},{"size":13019,"mtime":1610583195000,"results":"30","hashOfConfig":"21"},{"size":3041,"mtime":1610583195000,"results":"31","hashOfConfig":"21"},{"size":9482,"mtime":1681153157341,"results":"32","hashOfConfig":"21"},{"size":767,"mtime":1610583195000,"results":"33","hashOfConfig":"21"},{"size":173,"mtime":1681595296113,"results":"34","hashOfConfig":"21"},{"size":391,"mtime":1610583195000,"results":"35","hashOfConfig":"21"},{"size":237,"mtime":1610583195000,"results":"36","hashOfConfig":"21"},{"size":891,"mtime":1610583195000,"results":"37","hashOfConfig":"21"},{"size":942,"mtime":1610583195000,"results":"38","hashOfConfig":"21"},{"size":6204,"mtime":1681622552063,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"1plbj2g",{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"42"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"42"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"42"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"42"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"42"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"42"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85"},"G:\\KrishiMarket\\src\\index.js",[],["86","87"],"G:\\KrishiMarket\\src\\serviceWorker.js",[],"G:\\KrishiMarket\\src\\App.js",[],"G:\\KrishiMarket\\src\\Landing.js",["88"],"import React from \"react\"\nimport \"./App.css\"\nimport Footer from \"./Footer\"\nimport Header from \"./Header\"\nimport ShoppersSearch from \"./ShoppersSearch\"\n\n\nclass Landing extends React.Component {\n  render() {\n    return (\n      <div className = 'landing-main'>\n        <div className=\"Landing\">\n          <section id=\"landingPage\">\n            <div id=\"description\">\n              <h5>Welcome to the farmer's bazaar! \n              A place where local farmers can create their own inventory, update it, and sell farm-fresh products to everyone who is interested in fresh local produce. \n              Shoppers can search for the products they are interested in and find the farms that sell those products.</h5>\n            </div>\n            <ShoppersSearch/>\n          </section>\n          <Footer />\n        </div>\n      </div>\n\n    );\n  }\n}\n\nexport default Landing;\n","G:\\KrishiMarket\\src\\AddItems.js",["89"],"import React from \"react\"\nimport config from \"./config\"\nimport TokenService from \"./services/token-service\"\nimport ValidationError from \"./validationError\"\n\nclass AddItems extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n\n            itemName: {\n                value: \"\",\n                touched: false,\n            },\n            itemDescription: {\n                value: \"\",\n                touched: false,\n            },\n            itemPrice: {\n                value: \"\",\n                touched: false,\n            },\n            itemCount: {\n                value: \"\",\n                touched: false,\n            },\n\n        };\n    }\n\n\n    changeItemName(itemName) {\n        this.setState({\n            itemName: { value: itemName, touched: true },\n        });\n    }\n\n    changeItemDescription(itemDescription) {\n        this.setState({\n            itemDescription: { value: itemDescription, touched: true },\n        });\n    }\n\n    changeItemPrice(itemPrice) {\n        this.setState({\n            itemPrice: { value: itemPrice, touched: true },\n        });\n    }\n\n    changeItemCount(itemCount) {\n        this.setState({\n            itemCount: { value: itemCount, touched: true },\n        });\n    }\n\n\n    validateItemName() {\n        const itemName = this.state.itemName.value.trim();\n        if (itemName.length === 0) {\n            return <p className=\"input-error\">Item name is required</p>;\n        } else if (itemName.length < 2) {\n            return (\n                <p className=\"input-error\">\n                    Item name must be at least 2 characters long\n                </p>\n            );\n        }\n    }\n\n\n    validateItemDescription() {\n        const itemDescription = this.state.itemDescription.value.trim();\n        if (itemDescription.length === 0) {\n            return <p className=\"input-error\">Item description is required</p>;\n        } else if (itemDescription.length < 2) {\n            return (\n                <p className=\"input-error\">\n                    Item description must be at least 2 characters long\n                </p>\n            );\n        }\n    }\n\n\n    validateItemPrice() {\n        const itemPrice = this.state.itemPrice.value.trim();\n        if (itemPrice.length === 0) {\n            return <p className=\"input-error\">Item price is required</p>;\n        } else if (itemPrice.length < 1) {\n            return (\n                <p className=\"input-error\">\n                    Item price must be at least 1 characters long\n                </p>\n            );\n        }\n    }\n\n\n    validateItemCount() {\n        const itemCount = this.state.itemCount.value.trim();\n        if (itemCount.length === 0) {\n            return <p className=\"input-error\">Item count is required</p>;\n        } else if (itemCount.length < 1) {\n            return (\n                <p className=\"input-error\">\n                    Item price must be at least 1 characters long\n                </p>\n            );\n        }\n    }\n\n    componentDidMount() {\n\n\n        //if the user is not logged in, send him to landing page\n        if (!TokenService.hasAuthToken()){\n            window.location = '/'\n        }\n\n    }\n\n\n    addItem(event) {\n\n        // console.log('hello there')\n        event.preventDefault()\n        const data = {}\n\n        const formData = new FormData(event.target)\n\n        for (let value of formData) {\n            data[value[0]] = value[1]\n        }\n\n        let user_id = TokenService.getUserId();\n\n        let { itemName, itemDescription, itemPrice, itemCount } = data;\n        //get the current date in unix format \n        const timeElapsed = Date.now();\n        //conver the unix format date into string\n        const today = new Date(timeElapsed);\n        // console.log(itemName, itemDescription, itemPrice, itemCount)\n        let payload = {\n            users_id: user_id,\n            name: itemName,\n            description: itemDescription,\n            itemPrice: itemPrice,\n            itemCount: itemCount,\n            img: \"no-img.jpg\",\n           \n\n        }\n\n\n\n        console.log(payload)\n\n        ////////////////POST ITEMS//////////////////////////////////////////////\n\n        fetch(`${config.API_ENDPOINT}/items`, {\n            method: 'POST',\n            headers: {\n                'content-type': 'application/json',\n            },\n            body: JSON.stringify(payload),\n        })\n            .then((response) => response.json())\n            .then(responseJson => {\n                window.location = '/inventory'\n            })\n            .catch(err => {\n                console.log(err);\n            });\n\n    }\n\n    render() {\n        return (\n            <div className=\"AddItems\">\n                <section id=\"AddItemsPage\">\n                    <form className=\"additemForm\" onSubmit={this.addItem}>\n                        <label htmlFor=\"itemName\">Item name</label>\n                        <input\n                            type=\"text\"\n                            id=\"itemName\"\n                            name=\"itemName\"\n                            placeholder=\"Tomatoes\"\n                            onChange={(e) =>\n                                this.changeItemName(e.target.value)\n                            }\n                            required\n                        />\n                        {this.state.itemName.touched && (\n                            <ValidationError\n                                message={this.validateItemName()}\n                            />\n                        )}\n                        <label htmlFor=\"itemDescription\">Item description</label>\n                        <input\n                            type=\"text\"\n                            id=\"itemDescription\"\n                            name=\"itemDescription\"\n                            placeholder=\"Sweet\"\n                            onChange={(e) =>\n                                this.changeItemDescription(e.target.value)\n                            }\n                            required\n                        />\n                        {this.state.itemDescription.touched && (\n                            <ValidationError\n                                message={this.validateItemDescription()}\n                            />\n                        )}\n\n\n                        <label htmlFor=\"itemPrice\">Item price</label>\n                        <input\n                            type=\"text\"\n                            id=\"itemPrice\"\n                            name=\"itemPrice\"\n                            placeholder=\"Item price\"\n                            onChange={(e) =>\n                                this.changeItemPrice(e.target.value)\n                            }\n                            required\n                        />\n                        {this.state.itemPrice.touched && (\n                            <ValidationError\n                                message={this.validateItemPrice()}\n                            />\n                        )}\n\n\n                        <label htmlFor=\"itemCount\">Item count</label>\n                        <input\n                            type=\"text\"\n                            id=\"itemCount\"\n                            name=\"itemCount\"\n                            placeholder=\"Item count\"\n                            onChange={(e) =>\n                                this.changeItemCount(e.target.value)\n                            }\n                            required\n                        />\n                        {this.state.itemCount.touched && (\n                            <ValidationError\n                                message={this.validateItemCount()}\n                            />\n                        )}\n\n                        <button\n                            className=\"go-button\"\n                            type=\"submit\"\n                        >\n                            Add item\n                        </button>\n                    </form>\n                </section>\n            </div>\n        );\n    }\n}\n\nexport default AddItems;\n","G:\\KrishiMarket\\src\\Error.js",[],"G:\\KrishiMarket\\src\\NavBar.js",[],"G:\\KrishiMarket\\src\\Login.js",[],"G:\\KrishiMarket\\src\\Inventory.js",["90"],"import React from \"react\"\nimport config from \"./config\"\nimport TokenService from \"./services/token-service\"\nimport { Link } from 'react-router-dom'\n\nclass Inventory extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            itemsByUserId: [],\n\n        };\n    }\n\n\n\n    componentDidMount() {\n\n        let currentUser = TokenService.getUserId();\n        // console.log(currentUser)\n\n        //if the user is not logged in, send him to landing page\n        if (!TokenService.hasAuthToken()) {\n            window.location = '/'\n        }\n\n\n\n\n\n        let getItemsByUserIdUrl = `${config.API_ENDPOINT}/items/user/${currentUser}`;\n\n        fetch(getItemsByUserIdUrl)\n            .then((itemsInList) => itemsInList.json())\n            .then((itemsInList) => {\n                // console.log(itemsInList)\n                this.setState({\n                    itemsByUserId: itemsInList,\n                });\n                // console.log(this.state);\n            })\n\n            .catch((error) => this.setState({ error }));\n    }\n\n\n\n    render() {\n\n\n\n        // console.log(this.state.itemsByUserId.length)\n        let showItemsPage = ''\n        //by default show there are no items\n        if (this.state.itemsByUserId.length === 0) {\n            showItemsPage =\n            <tbody>\n                <tr className=\"itemsByUser\">\n                    <td>No items here</td>\n             </tr>\n            </tbody>\n                \n        }\n        // if there are items \n        else {\n\n            // display details for each one of the items\n            showItemsPage = this.state.itemsByUserId.map((item, key) => {\n                let itemDetailsUrl = `/item-details/${item.id}`\n                if (item) {\n                    return (\n                        <tbody key = {key}>\n                        <tr>  \n                            <td><Link to={itemDetailsUrl}>{item.name} </Link></td>\n                            <td>{item.description} </td>\n                            <td>{item.itemPrice} </td>\n                            <td>{item.itemCount} </td>\n                        </tr>\n                        </tbody>\n                    )\n                }\n            })\n        }\n\n\n        return (\n            <div className=\"Inventory\">\n                <section id=\"InventoryPage\">\n                <table className =\"inventoryTable\">\n                <colgroup>\n                    <col span = \"4\"/>\n                    <col span = \"4\"/>\n                    <col span = \"4\"/>\n                    <col span = \"4\"/>\n                </colgroup>\n                \n                <tbody>\n                <tr>\n                    <th>\n                        Name\n                    </th>\n                    <th>\n                        Description\n                    </th>\n\n                    <th>\n                        Price\n                    </th>\n                    <th>\n                        Count\n                    </th>\n                </tr>\n                </tbody>\n                    {showItemsPage}\n                    </table>\n\n                </section>\n            </div>\n        );\n    }\n}\n\nexport default Inventory;\n","G:\\KrishiMarket\\src\\Register.js",[],"G:\\KrishiMarket\\src\\Contact.js",["91","92"],"import React from \"react\"\nimport config from \"./config\"\nimport TokenService from \"./services/token-service\"\nimport { Link } from 'react-router-dom'\n\nclass Contact extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            itemsByUserId: {},\n\n        };\n    }\n\n\n\n    componentDidMount() {\n\n\n        const currentUser = this.props.match.params.userId\n        console.log(currentUser)\n\n\n\n        let getUserById = `${config.API_ENDPOINT}/users/${currentUser}`;\n\n        fetch(getUserById)\n            .then((itemsInList) => itemsInList.json())\n            .then((itemsInList) => {\n                // TODO get all the details from the user \n                console.log(itemsInList)\n                this.setState({\n                    itemsByUserId: itemsInList,\n                });\n                // console.log(this.state);\n            })\n\n            .catch((error) => this.setState({ error }));\n    }\n\n\n\n    render() {\n\n\n\n        // console.log(this.state.itemsByUserId.length)\n        let showItemsPage = ''\n        //by default show there are no items\n        if (this.state.itemsByUserId.length === 0) {\n            showItemsPage =\n            <tbody>\n                <tr className=\"itemsByUser\">\n                    <td>No items here</td>\n             </tr>\n            </tbody>\n                \n        }\n        // if there are items \n        else {\n\n            // display details for each one of the items\n            showItemsPage =  \n                        <tbody>\n                        <tr>  \n                            <td>{this.state.itemsByUserId.farm_name} </td>\n                            <td>{this.state.itemsByUserId.street_address} </td>\n                            <td>{this.state.itemsByUserId.city} </td>\n                            <td>{this.state.itemsByUserId.state} </td>\n                            <td>{this.state.itemsByUserId.zip} </td>\n                        </tr>\n                        </tbody>\n\n\n        }\n\n\n        return (\n            <div className=\"Inventory\">\n                <section id=\"InventoryPage\">\n                <table className =\"inventoryTable\">\n                <colgroup>\n                    <col span = \"4\"/>\n                    <col span = \"4\"/>\n                    <col span = \"4\"/>\n                    <col span = \"4\"/>\n                </colgroup>\n                \n                <tbody>\n                <tr>\n                    <th>\n                        Farm name\n                    </th>\n                    <th>\n                        Street address\n                    </th>\n\n                    <th>\n                        City\n                    </th>\n                    <th>\n                        State\n                    </th>\n                    <th>\n                        ZIP\n                    </th>\n\n                </tr>\n                </tbody>\n                    {showItemsPage}\n                    </table>\n\n                </section>\n            </div>\n        );\n    }\n}\n\nexport default Contact;\n","G:\\KrishiMarket\\src\\ItemDetails.js",["93"],"import React from \"react\"\nimport config from \"./config\"\nimport TokenService from \"./services/token-service\"\nimport ValidationError from \"./validationError\"\n\n\nclass ItemDetails extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            itemDetails: {},\n\n            itemName: {\n                value: \"\",\n                touched: false,\n            },\n            itemDescription: {\n                value: \"\",\n                touched: false,\n            },\n            itemPrice: {\n                value: \"\",\n                touched: false,\n            },\n            itemCount: {\n                value: \"\",\n                touched: false,\n            },\n\n        };\n    }\n\n\n    changeItemName(itemName) {\n        this.setState({\n            itemName: { value: itemName, touched: true },\n        });\n    }\n\n    changeItemDescription(itemDescription) {\n        this.setState({\n            itemDescription: { value: itemDescription, touched: true },\n        });\n    }\n\n    changeItemPrice(itemPrice) {\n        this.setState({\n            itemPrice: { value: itemPrice, touched: true },\n        });\n    }\n\n    changeItemCount(itemCount) {\n        this.setState({\n            itemCount: { value: itemCount, touched: true },\n        });\n    }\n\n\n    validateItemName() {\n        const itemName = this.state.itemName.value.trim();\n        if (itemName.length === 0) {\n            return <p className=\"input-error\">Item name is required</p>;\n        } else if (itemName.length < 2) {\n            return (\n                <p className=\"input-error\">\n                    Item name must be at least 2 characters long\n                </p>\n            );\n        }\n    }\n\n\n    validateItemDescription() {\n        const itemDescription = this.state.itemDescription.value.trim();\n        if (itemDescription.length === 0) {\n            return <p className=\"input-error\">Item description is required</p>;\n        } else if (itemDescription.length < 2) {\n            return (\n                <p className=\"input-error\">\n                    Item description must be at least 2 characters long\n                </p>\n            );\n        }\n    }\n\n\n    validateItemPrice() {\n        const itemPrice = this.state.itemPrice.value.trim();\n        if (itemPrice.length === 0) {\n            return <p className=\"input-error\">Item price is required</p>;\n        } else if (itemPrice.length < 1) {\n            return (\n                <p className=\"input-error\">\n                    Item price must be at least 1 characters long\n                </p>\n            );\n        }\n    }\n\n\n    validateItemCount() {\n        const itemCount = this.state.itemCount.value.trim();\n        if (itemCount.length === 0) {\n            return <p className=\"input-error\">Item count is required</p>;\n        } else if (itemCount.length < 1) {\n            return (\n                <p className=\"input-error\">\n                    Item price must be at least 1 characters long\n                </p>\n            );\n        }\n    }\n\n    componentDidMount() {\n\n\n        //if the user is not logged in, send him to landing page\n        if (!TokenService.hasAuthToken()) {\n            window.location = '/'\n        }\n\n        const itemId = this.props.match.params.itemId;\n\n\n\n        let getItemDetailsUrl = `${config.API_ENDPOINT}/items/${itemId}`;\n\n        fetch(getItemDetailsUrl)\n            .then((itemDetails) => itemDetails.json())\n            .then((itemDetails) => {\n                console.log(itemDetails)\n                this.setState({\n                    itemDetails: itemDetails,\n                });\n                // console.log(this.state);\n            })\n\n            .catch((error) => this.setState({ error }));\n    }\n\n\n    updateItem(event) {\n\n        // console.log('hello there')\n        event.preventDefault()\n        const data = {}\n\n        const formData = new FormData(event.target)\n\n        for (let value of formData) {\n            data[value[0]] = value[1]\n        }\n        console.log(data);\n        let user_id = TokenService.getUserId();\n\n        let { itemName, itemDescription, itemPrice, itemCount } = data;\n        //get the current date in unix format \n        const timeElapsed = Date.now();\n        //conver the unix format date into string\n        const today = new Date(timeElapsed);\n        \n        let payload = {\n            users_id: user_id,\n            name: itemName,\n            description: itemDescription,\n            itemPrice: itemPrice,\n            itemCount: itemCount,\n            img: \"no-img.jpg\",\n           \n\n        }\n\n\n\n    //     console.log(this.props)\n\n    \nconst itemId = window.location.href.split(\"/\")[4]\n\n\n        fetch(`${config.API_ENDPOINT}/items/${itemId}`, {\n            method: 'PATCH',\n            headers: {\n                'content-type': 'application/json',\n            },\n            body: JSON.stringify(payload),\n        })\n            .then((response) => response.json())\n            .then(responseJson => {\n                window.location = '/inventory'\n            })\n            .catch(err => {\n                console.log(err);\n            });\n\n    }\n\n    render() {\n\n\n\n\n\n\n\n        // console.log(this.state.itemDetails.length)\n        let showItemsDetailsPage = ''\n        //by default show there are no items\n        if (this.state.itemDetails.length === 0) {\n            showItemsDetailsPage =\n                <div className=\"itemsDetails\">\n                    No item details here\n             </div>\n        }\n        // if there are items \n        else {\n\n            // display details for each one of the items\n            showItemsDetailsPage =\n                <li>\n                    <form className=\"itemDetails\" onSubmit={this.updateItem}>\n                        <label htmlFor=\"itemName\">Item name</label>\n                        <input\n                            type=\"text\"\n                            id=\"itemName\"\n                            name=\"itemName\"\n                            placeholder=\"Tomatoes\"\n                            defaultValue = {this.state.itemDetails.name}\n                            onChange={(e) =>\n                                this.changeItemName(e.target.value)\n                            }\n                            required\n                        />\n                        {this.state.itemName.touched && (\n                            <ValidationError\n                                message={this.validateItemName()}\n                            />\n                        )}\n                        <label htmlFor=\"itemDescription\">Item description</label>\n                        <input\n                            type=\"text\"\n                            id=\"itemDescription\"\n                            name=\"itemDescription\"\n                            placeholder=\"Sweet\"\n                            defaultValue = {this.state.itemDetails.description}\n                            onChange={(e) =>\n                                this.changeItemDescription(e.target.value)\n                            }\n                            required\n                        />\n                        {this.state.itemDescription.touched && (\n                            <ValidationError\n                                message={this.validateItemDescription()}\n                            />\n                        )}\n\n\n                        <label htmlFor=\"itemPrice\">Item price</label>\n                        <input\n                            type=\"text\"\n                            id=\"itemPrice\"\n                            name=\"itemPrice\"\n                            placeholder=\"Item price\"\n                            defaultValue = {this.state.itemDetails.itemPrice}\n                            onChange={(e) =>\n                                this.changeItemPrice(e.target.value)\n                            }\n                            required\n                        />\n                        {this.state.itemPrice.touched && (\n                            <ValidationError\n                                message={this.validateItemPrice()}\n                            />\n                        )}\n\n\n                        <label htmlFor=\"itemCount\">Item count</label>\n                        <input\n                            type=\"text\"\n                            id=\"itemCount\"\n                            name=\"itemCount\"\n                            placeholder=\"Item count\"\n                            defaultValue = {this.state.itemDetails.itemCount}\n                            onChange={(e) =>\n                                this.changeItemCount(e.target.value)\n                            }\n                            required\n                        />\n                        {this.state.itemCount.touched && (\n                            <ValidationError\n                                message={this.validateItemCount()}\n                            />\n                        )}\n\n                        <button\n                            className=\"go-button\"\n                            type=\"submit\"\n                        >\n                            Update item\n                        </button>\n                    </form>\n\n                </li>\n        }\n\n\n\n\n        return (\n            <div className=\"UpdateItems\">\n                <section id=\"UpdateItemsPage\">\n                    {showItemsDetailsPage}\n         </section>\n            </div>\n        );\n    }\n}\n\nexport default ItemDetails;\n","G:\\KrishiMarket\\src\\services\\token-service.js",[],"G:\\KrishiMarket\\src\\config.js",["94"],"export default {\n    API_ENDPOINT: \"https://festive-planet-353313.el.r.appspot.com/api\",\n    //API_ENDPOINT: \"http://localhost:8000/api\",\n    TOKEN_KEY: 'farmers-bazaar'\n  }","G:\\KrishiMarket\\src\\Header.js",[],"G:\\KrishiMarket\\src\\validationError.js",[],"G:\\KrishiMarket\\src\\Footer.js",[],"G:\\KrishiMarket\\src\\services\\auth-api-service.js",[],"G:\\KrishiMarket\\src\\ShoppersSearch.js",["95","96"],"import React from \"react\"\nimport config from \"./config\"\nimport TokenService from \"./services/token-service\"\nimport ValidationError from \"./validationError\"\nimport { Link } from 'react-router-dom'\n\nclass ShoppersSearch extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            itemsByUserId: [],\n            searchTerm: {\n                value: \"\",\n                touched: false,\n            },\n            error: null\n\n        };\n    }\n    componentDidMount() {\n        let getItemsByUserIdUrl = `${config.API_ENDPOINT}/items/`;\n\n        fetch(getItemsByUserIdUrl)\n            .then((itemsInList) => itemsInList.json())\n            .then((itemsInList) => {\n                console.log(itemsInList)\n                this.setState({\n                    itemsByUserId: itemsInList,\n                });\n                // console.log(this.state);\n            })\n\n            .catch((error) => this.setState({ error }));\n    }\n\n    changeSearchTerm(searchTerm) {\n        this.setState({\n            searchTerm: { value: searchTerm },\n        });\n    }\n\n    validateSearchTerm() {\n        const searchTerm = this.state.searchTerm.value.trim();\n       if (searchTerm.length >0 && searchTerm.length < 2) {\n            return (\n                \"SearchTerm must be at least 2 characters long\"\n            );\n        }\n    }\n\n    searchForm = (event) => {\n\n        event.preventDefault();\n        const { searchTerm } = event.target;\n        console.log(\"searchTerm:\", searchTerm.value);\n        let getItemsBySearchTermUrl = `${config.API_ENDPOINT}/items/keyword/${searchTerm.value}`;\n        fetch(getItemsBySearchTermUrl)\n            .then((itemsBySearchTerm) => itemsBySearchTerm.json())\n            .then((itemsBySearchTerm) => {\n                console.log(itemsBySearchTerm)\n                this.setState({\n                    itemsByUserId: itemsBySearchTerm,\n                });\n                console.log(this.state);\n            })\n            .catch((error) => this.setState({ error }));\n\n    };\n    ShowAll = () => {\n\n        window.location = '/'\n    }\n    render() {\n\n        const msg = this.state.error ? <p>\n            {this.state.error}\n        </p> :\n            <div></div>;\n\n        // console.log(this.state.itemsByUserId.length)\n        let showItemsPage = ''\n        //by default show there are no items\n        if (this.state.itemsByUserId.length === 0) {\n            showItemsPage =\n                <tbody>\n                    <tr className=\"itemsByUser\">\n                        <td>No items here</td>\n                    </tr>\n                </tbody>\n\n        }\n        // if there are items \n        else {\n\n            // display details for each one of the items\n            showItemsPage = this.state.itemsByUserId.map((item, key) => {\n                // console.log(item)\n                let itemDetailsUrl = `/contact/${item.users_id}`\n                if (item) {\n                    return (\n                        <tbody key={key}>\n                            <tr>\n                                <td>{item.name} </td>\n                                <td>{item.description} </td>\n                                <td>{item.itemPrice} </td>\n                                <td>{item.itemCount} </td>\n                                <td><Link to={itemDetailsUrl}>contact </Link></td>\n                            </tr>\n                        </tbody>\n                    )\n                }\n            })\n        }\n\n\n        return (\n            <div className=\"Inventory\">\n                <section id=\"InventoryPage\">\n                    <form className=\"searchForm\" onSubmit={this.searchForm}>\n                        <div className=\"errorMessage\">\n                            {msg}\n                        </div>\n                        \n                        <input\n                            type=\"text\"\n                            id=\"searchTerm\"\n                            name=\"searchTerm\"\n                            placeholder=\"Produce name\"\n                            onChange={(e) =>\n                                this.changeSearchTerm(e.target.value)\n                            }\n                            required\n                        />\n                        {this.state.searchTerm.touched && (\n                            <ValidationError\n                                message={this.validateSearchTerm()}\n                            />\n                        )}\n                        <ValidationError\n                            message={this.validateSearchTerm()}\n                        />\n\n                        <div className=\"button-wrapper\">\n                            <button\n                                className=\"go-button\"\n                                type=\"submit\"\n                            >\n                                Search\n                        </button>\n\n                            <Link className=\"show-button\" to=\"/\" onClick={this.ShowAll}>\n                                <span className='navlink-text'>Show all</span>\n                            </Link>\n                        </div>\n                    </form>\n\n\n\n\n                    <table className=\"inventoryTable\">\n                        <colgroup>\n                            <col span=\"4\" />\n                            <col span=\"4\" />\n                            <col span=\"4\" />\n                            <col span=\"4\" />\n                        </colgroup>\n\n                        <tbody>\n                            <tr>\n                                <th>\n                                    Name\n                    </th>\n                                <th>\n                                    Description\n                    </th>\n\n                                <th>\n                                    Price\n                    </th>\n                                <th>\n                                    Count\n                    </th>\n                            </tr>\n                        </tbody>\n                        {showItemsPage}\n                    </table>\n\n                </section>\n            </div>\n        );\n    }\n}\n\nexport default ShoppersSearch;\n",{"ruleId":"97","replacedBy":"98"},{"ruleId":"99","replacedBy":"100"},{"ruleId":"101","severity":1,"message":"102","line":4,"column":8,"nodeType":"103","messageId":"104","endLine":4,"endColumn":14},{"ruleId":"101","severity":1,"message":"105","line":141,"column":15,"nodeType":"103","messageId":"104","endLine":141,"endColumn":20},{"ruleId":"106","severity":1,"message":"107","line":68,"column":70,"nodeType":"108","messageId":"109","endLine":68,"endColumn":72},{"ruleId":"101","severity":1,"message":"110","line":3,"column":8,"nodeType":"103","messageId":"104","endLine":3,"endColumn":20},{"ruleId":"101","severity":1,"message":"111","line":4,"column":10,"nodeType":"103","messageId":"104","endLine":4,"endColumn":14},{"ruleId":"101","severity":1,"message":"105","line":160,"column":15,"nodeType":"103","messageId":"104","endLine":160,"endColumn":20},{"ruleId":"112","severity":1,"message":"113","line":1,"column":1,"nodeType":"114","endLine":5,"endColumn":4},{"ruleId":"101","severity":1,"message":"110","line":3,"column":8,"nodeType":"103","messageId":"104","endLine":3,"endColumn":20},{"ruleId":"106","severity":1,"message":"107","line":96,"column":70,"nodeType":"108","messageId":"109","endLine":96,"endColumn":72},"no-native-reassign",["115"],"no-negated-in-lhs",["116"],"no-unused-vars","'Header' is defined but never used.","Identifier","unusedVar","'today' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","'TokenService' is defined but never used.","'Link' is defined but never used.","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","no-global-assign","no-unsafe-negation"]